import 'package:cloud_firestore/cloud_firestore.dart';
import 'week_handler.dart';

Future<void> updateAllSkiersTotalPoints() async {
  print("updateAllSkiersTotalPoints k√∂rs...");
  try {
    FirebaseFirestore db = FirebaseFirestore.instance;
    int currentWeek = await getCurrentWeek();

    QuerySnapshot skiersSnapshot = await db.collection('SkiersDb').get();
    if (skiersSnapshot.docs.isEmpty) {
      print("‚ùå Inga skid√•kare hittades.");
      return;
    }

    WriteBatch batch = db.batch();

    for (var skierDoc in skiersSnapshot.docs) {
      String skierId = skierDoc.id;

      DocumentReference weekRef = db
          .collection('SkiersDb')
          .doc(skierId)
          .collection('weeklyResults')
          .doc("week$currentWeek");

      DocumentSnapshot weekDoc = await weekRef.get();
      if (!weekDoc.exists) continue;

      Map<String, dynamic> weekData = weekDoc.data() as Map<String, dynamic>;
      Map<String, dynamic> competitions =
          Map<String, dynamic>.from(weekData['competitions'] ?? {});
      List<dynamic> alreadyCounted =
          List<dynamic>.from(weekData['countedInTotal'] ?? []);

      int newPoints = 0;
      List<String> newlyCounted = [];

      for (var entry in competitions.entries) {
        String compId = entry.key;
        final result = entry.value;

        // üîπ Anpassad till nya strukturen d√§r varje entry √§r en map { points: X, placement: Y }
        if (!alreadyCounted.contains(compId)) {
          if (result is Map && result['points'] is int) {
            newPoints += (result['points'] as num).toInt();
            newlyCounted.add(compId);
          }
        }
      }

      if (newPoints > 0) {
        // üîπ L√§gg till po√§ng till totalPoints
        batch.update(
          db.collection('SkiersDb').doc(skierId),
          {'totalPoints': FieldValue.increment(newPoints)},
        );

        // üîπ Uppdatera countedInTotal f√∂r denna vecka
        batch.update(
          weekRef,
          {
            'countedInTotal': FieldValue.arrayUnion(newlyCounted),
          },
        );
      } else {}
    }

    await batch.commit();
  } catch (e) {
    print("‚ùå Fel vid uppdatering av totalpo√§ng: $e");
  }
}

Future<List<String>> updateAllTeamsTotalPoints() async {
  print("updateAllTeamsTotalPoints k√∂rs...");
  List<String> feedback = [];

  try {
    FirebaseFirestore db = FirebaseFirestore.instance;
    int currentWeek = await getCurrentWeek();

    QuerySnapshot teamsSnapshot = await db.collection('teams').get();
    if (teamsSnapshot.docs.isEmpty) {
      feedback.add("‚ùå Inga lag hittades.");
      return feedback;
    }

    WriteBatch batch = db.batch();

    for (var teamDoc in teamsSnapshot.docs) {
      String teamId = teamDoc.id;

      DocumentSnapshot weeklyTeamDoc = await db
          .collection('teams')
          .doc(teamId)
          .collection('weeklyTeams')
          .doc("week$currentWeek")
          .get();

      if (!weeklyTeamDoc.exists) {
        feedback.add(
            "‚ö†Ô∏è Lag $teamId har inget veckodokument f√∂r vecka $currentWeek.");
        continue;
      }

      Map<String, dynamic> weekData =
          weeklyTeamDoc.data() as Map<String, dynamic>;
      int weeklyPoints = weekData['weeklyPoints'] ?? 0;
      int alreadyCounted = weekData['weeklyPointsCountedInTotal'] ?? 0;

      int pointsToAdd = weeklyPoints - alreadyCounted;

      // H√§mta nuvarande totalPoints f√∂r feedback

      if (pointsToAdd > 0) {
        batch.update(db.collection('teams').doc(teamId), {
          'totalPoints': FieldValue.increment(pointsToAdd),
        });

        batch.update(
            db
                .collection('teams')
                .doc(teamId)
                .collection('weeklyTeams')
                .doc("week$currentWeek"),
            {
              'weeklyPointsCountedInTotal': alreadyCounted + pointsToAdd,
            });

        feedback.add("Redan r√§knat denna vecka = $alreadyCounted, "
            "Nya po√§ng som l√§ggs till = $pointsToAdd");
      } else {
        feedback.add(
            "‚ö†Ô∏è Lag $teamId:inga nya po√§ng. Veckopo√§ng = $weeklyPoints, Redan r√§knade po√§ng f√∂r veckan = $alreadyCounted");
      }
    }

    await batch.commit();
    feedback.add("Funktion k√∂rdes som den skulle");
  } catch (e) {
    feedback.add("‚ùå Fel vid uppdatering av alla lags totalpo√§ng: $e");
  }

  return feedback;
}

Future<List<String>> undoAllTeamsTotalPointsWithWeekly() async {
  print("undoAllTeamsTotalPointsWithWeekly k√∂rs...");
  List<String> feedback = [];

  try {
    FirebaseFirestore db = FirebaseFirestore.instance;
    int currentWeek = await getCurrentWeek();

    QuerySnapshot teamsSnapshot = await db.collection('teams').get();
    if (teamsSnapshot.docs.isEmpty) {
      feedback.add("‚ùå Inga lag hittades.");
      return feedback;
    }

    WriteBatch batch = db.batch();

    for (var teamDoc in teamsSnapshot.docs) {
      String teamId = teamDoc.id;

      DocumentReference weeklyRef = db
          .collection('teams')
          .doc(teamId)
          .collection('weeklyTeams')
          .doc("week$currentWeek");

      DocumentSnapshot weeklyTeamDoc = await weeklyRef.get();

      if (!weeklyTeamDoc.exists) {
        feedback.add("‚ö†Ô∏è Lag $teamId saknar data f√∂r vecka $currentWeek.");
        continue;
      }

      Map<String, dynamic> weekData =
          weeklyTeamDoc.data() as Map<String, dynamic>;

      int alreadyCounted = weekData['weeklyPointsCountedInTotal'] ?? 0;

      if (alreadyCounted > 0) {
        feedback.add("üîª Lag $teamId: -$alreadyCounted po√§ng togs bort");

        // Minska totalPoints
        batch.update(
          db.collection('teams').doc(teamId),
          {'totalPoints': FieldValue.increment(-alreadyCounted)},
        );

        // Nollst√§ll counted-in-total
        batch.update(
          weeklyRef,
          {'weeklyPointsCountedInTotal': 0},
        );
      } else {
        feedback
            .add("Lag $teamId hade inga po√§ng r√§knade f√∂r vecka $currentWeek.");
      }
    }

    await batch.commit();
    feedback.add(
        "‚úÖ Alla lag fick sina inr√§knade po√§ng √•terst√§llda f√∂r vecka $currentWeek!");
  } catch (e) {
    feedback.add("‚ùå Fel vid √•terst√§llning av totalPoints: $e");
  }

  return feedback;
}

Future<void> updateAllTeamsWeeklyPoints(bool restoringCachedLeaderboard) async {
  print("updateAllTeamsWeeklyPoints k√∂rs...");
  try {
    FirebaseFirestore db = FirebaseFirestore.instance;
    int currentWeek = await getCurrentWeek();

    QuerySnapshot teamsSnapshot = await db.collection('teams').get();
    if (teamsSnapshot.docs.isEmpty) {
      print("‚ùå Inga lag hittades.");
      return;
    }

    WriteBatch batch = db.batch();

    for (var teamDoc in teamsSnapshot.docs) {
      String teamId = teamDoc.id;

      DocumentSnapshot weeklyTeamDoc = await db
          .collection('teams')
          .doc(teamId)
          .collection('weeklyTeams')
          .doc("week$currentWeek")
          .get();

      if (!weeklyTeamDoc.exists) {
        print("‚ö†Ô∏è Laget $teamId har inget registrerat f√∂r vecka $currentWeek.");
        continue;
      }

      final data = weeklyTeamDoc.data() as Map<String, dynamic>;
      final List<dynamic> skiers = data['skiers'] ?? [];
      final String? captainId = data['captain']?.toString();

      if (skiers.isEmpty) {
        print("‚ö†Ô∏è Laget $teamId har inga √•kare vecka $currentWeek.");
        continue;
      }

      int totalTeamWeeklyPoints = 0;

      for (var skier in skiers) {
        if (skier is Map<String, dynamic>) {
          int points = skier['totalWeeklyPoints'] ?? 0;
          String skierId = skier['skierId'] ?? '';

          if (skierId == captainId) {
            points *= 2;
          }

          totalTeamWeeklyPoints += points;
        }
      }

      if (!restoringCachedLeaderboard) {
        //f√∂r att inte k√∂ra totalPointsSyncDecrease vid √•terst√§llning fr√•n cache
        batch.set(
          db
              .collection('teams')
              .doc(teamId)
              .collection('weeklyTeams')
              .doc("week$currentWeek"),
          {
            'weeklyPoints': totalTeamWeeklyPoints,
            'weeklyPointsCountedInTotal': totalTeamWeeklyPoints,
          },
          SetOptions(merge: true),
        );
      } else {
        batch.set(
          db
              .collection('teams')
              .doc(teamId)
              .collection('weeklyTeams')
              .doc("week$currentWeek"),
          {
            'weeklyPoints': totalTeamWeeklyPoints,
          },
          SetOptions(merge: true),
        );
      }
    }

    await batch.commit();

    if (restoringCachedLeaderboard) {
      print("$restoringCachedLeaderboard");
      await totalPointsSyncDecrease(); // Denna ska inte k√∂ras vid √•terst√§llning fr√•n cache leadboard
    }
  } catch (e) {
    print("‚ùå Fel vid uppdatering av alla lags veckopo√§ng: $e");
  }
}

Future<Map<String, int>> getAllSkiersPoints(
    List<String> skierIds, int weekNumber) async {
  print("getAllSkiersPoints k√∂rs f√∂r vecka $weekNumber...");
  Map<String, int> skierPointsMap = {};

  try {
    List<Future<DocumentSnapshot>> futures = skierIds.map((skierId) {
      return FirebaseFirestore.instance
          .collection('SkiersDb')
          .doc(skierId)
          .collection('weeklyResults')
          .doc("week$weekNumber")
          .get();
    }).toList();

    List<DocumentSnapshot> results =
        await Future.wait(futures); // üî• Batch-h√§mtning

    for (int i = 0; i < results.length; i++) {
      DocumentSnapshot weekDoc = results[i];

      int totalWeeklyPoints = 0;

      if (weekDoc.exists && weekDoc.data() != null) {
        var data = weekDoc.data();
        if (data is Map<String, dynamic>) {
          totalWeeklyPoints = (data['totalWeeklyPoints'] ?? 0) as int;
        }
      }

      skierPointsMap[skierIds[i]] = totalWeeklyPoints;
    }
  } catch (e) {
    print("‚ùå Error fetching totalWeeklyPoints for skiers: $e");
  }

  return skierPointsMap;
}

Future<void> syncSkierPointsToWeeklyTeams() async {
  print("syncSkierPointsToWeeklyTeams k√∂rs...");
  final db = FirebaseFirestore.instance;
  int weekNumber = await getCurrentWeek();

  try {
    // üîπ 1. H√§mta alla lag
    final teamsSnapshot = await db.collection('teams').get();

    // üîπ 2. Bygg en lista med alla unika √•kare fr√•n alla lag
    Set<String> allSkierIds = {};
    Map<String, List<String>> teamToSkierIds =
        {}; // f√∂r att veta vilka √•kare per lag
    for (var teamDoc in teamsSnapshot.docs) {
      final weeklyRef =
          teamDoc.reference.collection('weeklyTeams').doc("week$weekNumber");
      final weekSnap = await weeklyRef.get();
      if (!weekSnap.exists) continue;

      final skiers = List.from((weekSnap.data()?['skiers'] ?? []));
      final ids = skiers.map((s) => s['skierId'].toString()).toList();
      allSkierIds.addAll(ids);
      teamToSkierIds[teamDoc.id] = ids;
    }

    // üîπ 3. H√§mta po√§ngen f√∂r alla unika √•kare en g√•ng
    final allSkierPoints =
        await getAllSkiersPoints(allSkierIds.toList(), weekNumber);

    // üîπ 4. Uppdatera alla lag med po√§ngen fr√•n kartan
    final WriteBatch batch = db.batch();
    int updatedTeams = 0;

    for (var teamDoc in teamsSnapshot.docs) {
      final teamId = teamDoc.id;
      final weeklyRef =
          teamDoc.reference.collection('weeklyTeams').doc("week$weekNumber");
      final weekSnap = await weeklyRef.get();
      if (!weekSnap.exists) continue;

      final skiers = List.from((weekSnap.data()?['skiers'] ?? []));

      for (var skier in skiers) {
        final id = skier['skierId'];
        if (allSkierPoints.containsKey(id)) {
          skier['totalWeeklyPoints'] = allSkierPoints[id];
        }
      }

      batch.update(weeklyRef, {'skiers': skiers});
      updatedTeams++;
    }

    await batch.commit();
    print(
        "üéâ Alla lags po√§ng synkade med optimerad batch f√∂r vecka $weekNumber! Uppdaterade lag: $updatedTeams");
  } catch (e) {
    print("‚ùå Fel vid optimerad synkning av po√§ng: $e");
  }
}

Future<void> restoreTeamPointsFromCachedLeaderboard(int weekNumber) async {
  final db = FirebaseFirestore.instance;
  final cachedRef =
      db.collection('cachedData').doc('leaderboard_week$weekNumber');
  final cachedDoc = await cachedRef.get();

  if (!cachedDoc.exists) {
    print("‚ùå Ingen leaderboard-cache hittad f√∂r vecka $weekNumber.");
    return;
  }

  final List<dynamic> cachedTeams = cachedDoc.get('teams') ?? [];
  WriteBatch batch = db.batch();

  for (var cachedTeam in cachedTeams) {
    final String teamId = cachedTeam['teamId'];
    final int totalPoints = cachedTeam['totalPoints'] ?? 0;
    final int weeklyPoints = cachedTeam['weeklyPoints'] ?? 0;

    final teamRef = db.collection('teams').doc(teamId);

    batch.update(teamRef, {
      'totalPoints': totalPoints,
      'weeklyPoints': weeklyPoints,
    });
  }

  await batch.commit();
  print("‚úÖ √Öterst√§llde enbart po√§ng fr√•n cache f√∂r vecka $weekNumber.");
  resetWeekPointsData(
      false); //√ÑR ENDAST FALSE N√ÑR MAN RESETAR FR√ÖN EN GAMMAL LEADERBOARD
  print("üîÑ Po√§ngen f√∂r veckans t√§vlingar har nollst√§lts.");
  await syncSkierPointsToWeeklyTeams();
}

Future<String> resetWeekPointsData(bool restoringCachedLeaderboard) async {
  print("resetWeekPointsData k√∂rs...");
  try {
    int currentWeek = await getCurrentWeek();

    FirebaseFirestore db = FirebaseFirestore.instance;

    // üîπ 1. Radera veckodata f√∂r alla skid√•kare
    final skiersSnapshot = await db.collection('SkiersDb').get();
    WriteBatch skierBatch = db.batch();

    for (var skierDoc in skiersSnapshot.docs) {
      final skierId = skierDoc.id;
      final weekRef = db
          .collection('SkiersDb')
          .doc(skierId)
          .collection('weeklyResults')
          .doc("week$currentWeek");

      final weekSnap = await weekRef.get();
      if (weekSnap.exists && weekSnap.data() != null) {
        final weekData = weekSnap.data() as Map<String, dynamic>;
        final competitions =
            Map<String, dynamic>.from(weekData['competitions'] ?? {});
        final countedInTotal =
            List<String>.from(weekData['countedInTotal'] ?? []);

        int pointsToRemove = 0;

        for (var compId in countedInTotal) {
          if (competitions.containsKey(compId)) {
            final comp = competitions[compId];
            if (comp is Map && comp['points'] is num) {
              pointsToRemove += (comp['points'] as num).toInt();
            }
          }
        }

        if (pointsToRemove > 0) {
          final skierRef = db.collection('SkiersDb').doc(skierId);
          skierBatch.update(skierRef, {
            'totalPoints': FieldValue.increment(-pointsToRemove),
          });
        }
      }

      // üîπ Till sist: ta bort hela veckodokumentet
      skierBatch.delete(weekRef);
    }

    await skierBatch.commit();
    print("üßπ Rensade weeklyResults f√∂r vecka $currentWeek");

    // üîπ 2. Rensa po√§ng fr√•n alla lag f√∂r den veckan
    final teamsSnapshot = await db.collection('teams').get();
    WriteBatch teamBatch = db.batch();

    int affectedTeams = 0;

    for (var teamDoc in teamsSnapshot.docs) {
      final weeklyRef =
          teamDoc.reference.collection('weeklyTeams').doc("week$currentWeek");

      final weekSnap = await weeklyRef.get();
      if (!weekSnap.exists) continue;

      final weekData = weekSnap.data() as Map<String, dynamic>;
      List<dynamic> skiers = List.from(weekData['skiers'] ?? []);

      // Nollst√§ll po√§ng f√∂r varje √•kare
      for (var skier in skiers) {
        skier['totalWeeklyPoints'] = 0;
        skier['competitions'] = {};
        skier['countedCompetitions'] = [];
      }

      teamBatch.update(weeklyRef, {
        'skiers': skiers,
      });
      affectedTeams++;
    }

    await teamBatch.commit();
    await updateAllTeamsWeeklyPoints(
        restoringCachedLeaderboard); // boolean f√∂r att inte k√∂ra totalPointsSyncDecrease vid √•terst√§llning fr√•n cache
    print("üßπ Rensade weeklyTeams-data f√∂r vecka $currentWeek");

    return "‚úÖ Veckodata f√∂r vecka $currentWeek har raderats f√∂r ${skiersSnapshot.docs.length} √•kare och $affectedTeams lag.";
  } catch (e) {
    print("‚ùå Fel vid resetWeekData: $e");
    return "‚ùå Fel vid radering av veckodata: $e";
  }
}

Future<List<String>> totalPointsSyncDecrease() async {
  print("totalPointsSyncDecrease k√∂rs...");
  List<String> feedback = [];
  try {
    FirebaseFirestore db = FirebaseFirestore.instance;
    int currentWeek = await getCurrentWeek();

    QuerySnapshot teamsSnapshot = await db.collection('teams').get();
    if (teamsSnapshot.docs.isEmpty) {
      feedback.add("Inga lag hittades.");
      return feedback;
    }

    WriteBatch batch = db.batch();

    for (var teamDoc in teamsSnapshot.docs) {
      String teamId = teamDoc.id;

      DocumentReference weeklyRef = db
          .collection('teams')
          .doc(teamId)
          .collection('weeklyTeams')
          .doc("week$currentWeek");

      DocumentSnapshot weeklyTeamDoc = await weeklyRef.get();

      if (!weeklyTeamDoc.exists) {
        feedback.add("Lag $teamId saknar data f√∂r vecka $currentWeek.");
        continue;
      }

      Map<String, dynamic> weekData =
          weeklyTeamDoc.data() as Map<String, dynamic>;

      int weeklyPoints = weekData['weeklyPoints'] ?? 0;
      int alreadyCounted = weekData['weeklyPointsCountedInTotal'] ?? 0;

      // üîπ Om veckopo√§ngen har minskat sedan sist
      if (weeklyPoints < alreadyCounted) {
        int diff = alreadyCounted - weeklyPoints;

        feedback.add(
            " Lag $teamId: -$diff po√§ng justeras (fr√•n $alreadyCounted ‚Üí $weeklyPoints)");

        // Minska totalPoints med mellanskillnaden
        batch.update(
          db.collection('teams').doc(teamId),
          {'totalPoints': FieldValue.increment(-diff)},
        );

        // Uppdatera countedInTotal s√• att den matchar nuvarande weeklyPoints
        batch.update(
          weeklyRef,
          {'weeklyPointsCountedInTotal': weeklyPoints},
        );
      } else {
        feedback.add(
            "Lag $teamId beh√∂vde ingen justering ($weeklyPoints / $alreadyCounted).");
      }
    }

    await batch.commit();
    feedback.add("‚úÖ Kontroll och justering av minskade veckopo√§ng klar!");
  } catch (e) {
    feedback.add("‚ùå Fel vid kontroll/justering av minskade veckopo√§ng: $e");
  }

  return feedback;
}

Future<String> undoCompetitionPoints(String competitionId) async {
  print("undoCompetitionPoints k√∂rs");
  try {
    FirebaseFirestore db = FirebaseFirestore.instance;
    int currentWeek = await getCurrentWeek();

    QuerySnapshot skiersSnapshot = await db.collection('SkiersDb').get();
    List<Future<DocumentSnapshot>> weekDocsFutures = skiersSnapshot.docs
        .map((skierDoc) => db
            .collection('SkiersDb')
            .doc(skierDoc.id)
            .collection('weeklyResults')
            .doc("week$currentWeek")
            .get())
        .toList();

    List<DocumentSnapshot> weekDocs = await Future.wait(weekDocsFutures);
    WriteBatch skierBatch = db.batch();

    int affectedSkiers = 0;
    int totalPointsRemoved = 0;

    for (int i = 0; i < skiersSnapshot.docs.length; i++) {
      String skierId = skiersSnapshot.docs[i].id;
      DocumentSnapshot weekDoc = weekDocs[i];

      if (!weekDoc.exists || weekDoc.data() == null) continue;

      Map<String, dynamic> data = weekDoc.data() as Map<String, dynamic>;
      Map<String, dynamic> competitions =
          Map<String, dynamic>.from(data['competitions'] ?? {});
      List<dynamic> counted =
          List<dynamic>.from(data['countedCompetitions'] ?? []);
      List<dynamic> countedInTotal =
          List<dynamic>.from(data['countedInTotal'] ?? []);

      if (competitions.containsKey(competitionId)) {
        final removedComp = competitions[competitionId];
        affectedSkiers++;

        competitions.remove(competitionId);
        counted.remove(competitionId);

        // üîπ R√§kna om totalWeeklyPoints
        int newTotal = competitions.values.fold(
          0,
          (a, b) => b is Map && b['points'] is num
              ? a + (b['points'] as num).toInt()
              : a,
        );

        final weekRef = weekDoc.reference;
        skierBatch.update(weekRef, {
          'competitions': competitions,
          'countedCompetitions': counted,
          'totalWeeklyPoints': newTotal,
        });

        // üîπ Dra bort fr√•n totalPoints om den var r√§knad
        if (countedInTotal.contains(competitionId)) {
          if (removedComp is Map && removedComp['points'] is num) {
            int removedPoints = (removedComp['points'] as num).toInt();
            totalPointsRemoved += removedPoints;
            final skierRef = db.collection('SkiersDb').doc(skierId);
            skierBatch.update(skierRef, {
              'totalPoints': FieldValue.increment(-removedPoints),
            });
            countedInTotal.remove(competitionId);
            skierBatch.update(weekRef, {
              'countedInTotal': countedInTotal,
            });
          }
        }

        // üîπ Ta bort placering fr√•n recentPlacements
        if (removedComp is Map && removedComp['placement'] is int) {
          int removedPlacement = removedComp['placement'];
          final skierRef = db.collection('SkiersDb').doc(skierId);
          final skierDoc = skiersSnapshot.docs[i];
          List<dynamic> recentPlacements =
              List.from(skierDoc.get('recentPlacements') ?? []);

          recentPlacements.remove(removedPlacement);
          skierBatch.update(skierRef, {
            'recentPlacements': recentPlacements,
          });
        }
      }
    }

    await skierBatch.commit();
    return "$competitionId √•terst√§lld f√∂r vecka $currentWeek.\n"
        "$affectedSkiers √•kare p√•verkades och totalt $totalPointsRemoved po√§ng drogs bort fr√•n totalpo√§ng.";
  } catch (e) {
    return "‚ùå Fel vid undoCompetitionPoints: $e";
  }
}
