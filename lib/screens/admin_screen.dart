import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:real_fls/designs/button_design.dart';
import 'package:real_fls/handlers/team_details_handler.dart';
import 'package:real_fls/handlers/week_handler.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:real_fls/screens/admin_new_week_screen.dart';
import 'package:real_fls/screens/admin_remove_data.dart';
import '../providers/team_provider.dart';
import '../handlers/update_points.dart';
import '../services/fetch_from_fis.dart';
import 'package:intl/intl.dart';
import 'dart:convert';
import '../handlers/leaderboard_handler.dart';

class AdminScreen extends StatelessWidget {
  const AdminScreen({super.key});

  @override
  Widget build(BuildContext context) {
    bool isAdmin = context.watch<TeamProvider>().isAdmin;

    if (!isAdmin) {
      return Scaffold(
        appBar: AppBar(title: const Text("√Ötkomst nekad")),
        body: const Center(
            child: Text("üö´ Du har inte beh√∂righet att se denna sida.")),
      );
    }

    return Scaffold(
      appBar: AppBar(title: const Text("üèÅ Adminpanel")),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text("Adminpanel",
                style: TextStyle(fontSize: 26, fontWeight: FontWeight.bold)),
            const SizedBox(height: 10),
            Row(
              children: [
                HoverButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => const AdminNewWeekScreen()),
                    );
                  },
                  text: "Skapa Ny T√§vlingsvecka",
                ),
                SizedBox(
                  width: 10,
                ),
                HoverButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => const AdminRemoveData()),
                    );
                  },
                  text: "√Öterst√§ll Po√§ng",
                ),
              ],
            ),
            const SizedBox(height: 20),
            adminCard(
              context,
              icon: Icons.flag,
              title: "Distans - T√§vlingar & Resultat",
              child: const AddCompetitionsResultsWidget(),
            ),
            adminCard(
              context,
              icon: Icons.flag,
              title: "SPRINT T√§vlingar & Resultat",
              child: const AddSprintResultsWidget(),
            ),
            adminCard(
              context,
              icon: Icons.groups,
              title: "Lag",
              child: Column(
                children: [
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.yellow.shade700),
                    onPressed: () async {
                      final confirmed = await _confirmDangerousAction(context,
                          "Denna √•tg√§rd uppdaterar lagens TOTALPO√ÑNG.");
                      if (confirmed) {
                        List<String> feedback =
                            await updateAllTeamsTotalPoints();

                        await showPointsFeedback(
                          context,
                          title: "Uppdatering av totalpo√§ng",
                          messages: feedback,
                        );
                        _snack(context, "‚úÖ Lagens totalpo√§ng uppdaterade!");
                      }
                    },
                    child: const Text(" Uppdatera lagens totalpo√§ng"),
                  ),
                  const SizedBox(height: 10),
                  const Text(
                      " B√§st att uppdatera totalpo√§ngen en stund efter fis-resultaten √§r typ helt klara \n"
                      "s√• ingen blir diskad eller liknande. M√•ste man √§nd√• √•ngra lagens total po√§ng s√• g√•r det men enklast att undvika \n"
                      "f√∂r att minska risken f√∂r bugg, dock ska det fungera till 100% s√• var inte r√§dd att g√∂ra det."),
                  const SizedBox(height: 10),
                  ElevatedButton(
                    onPressed: () async {
                      await updateAllTeamsWeeklyPoints(true);
                      _snack(context, "‚úÖ Lagens veckopo√§ng uppdaterade!");
                    },
                    child: const Text("Uppdatera lagens veckopo√§ng"),
                  ),
                  const SizedBox(height: 10),
                ],
              ),
            ),
            adminCard(
              context,
              icon: Icons.leaderboard,
              title: "Leaderboard Cache",
              child: Column(
                children: [
                  ElevatedButton(
                    onPressed: () async {
                      await cacheTemporaryLeaderboard();
                      _snack(context, "üíæ Tempor√§r leaderboard cachad!");
                    },
                    child: const Text("TEMP Cachea leaderboard"),
                  ),
                  const SizedBox(height: 10),
                  ElevatedButton(
                    onPressed: () async {
                      final confirmed = await _confirmDangerousAction(context,
                          "Denna √•tg√§rd sparar den totala leaderboarden f√∂r hela veckan");
                      if (confirmed) {
                        await finalizeLeaderboardCache();
                        _snack(context, "üìå Permanent leaderboard sparad!");
                      }
                    },
                    child: const Text("CACHEA slutgiltig leaderboard"),
                  ),
                ],
              ),
            ),
            adminCard(
              context,
              icon: Icons.person,
              title: "Skid√•kare",
              child: ElevatedButton(
                onPressed: () async {
                  await updateAllSkiersTotalPoints();
                  _snack(context, "‚úÖ Skid√•kares totalpo√§ng uppdaterade!");
                },
                child: const Text(
                    "Uppdatera √•kares totalpo√§ng - k√∂rs automatiskt n√§r du l√§gger till ett resultat"),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _SectionHeader extends StatelessWidget {
  final String title;
  const _SectionHeader(this.title);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 12.0),
      child: Text(
        title,
        style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
      ),
    );
  }
}

class AddCompetitionsResultsWidget extends StatefulWidget {
  const AddCompetitionsResultsWidget({super.key});

  @override
  State<AddCompetitionsResultsWidget> createState() =>
      _AddCompetitionsResultsState();
}

class _AddCompetitionsResultsState extends State<AddCompetitionsResultsWidget> {
  final TextEditingController _compURLController = TextEditingController();
  List<String> competitionOptions = [];
  String? selectedCompetition;

  @override
  void initState() {
    super.initState();
    fetchDefinedCompetitions();
  }

  Future<void> fetchDefinedCompetitions() async {
    try {
      FirebaseFirestore db = FirebaseFirestore.instance;
      int currentWeek = await getCurrentWeek();

      DocumentSnapshot doc =
          await db.collection('gameData').doc('currentWeek').get();

      if (doc.exists &&
          (doc.data() as Map<String, dynamic>).containsKey('competitions')) {
        List<dynamic> comps = doc.get('competitions');
        setState(() {
          competitionOptions = comps.cast<String>();
        });
      } else {
        print("‚ö†Ô∏è Inga t√§vlingar definierade f√∂r aktuell vecka.");
      }
    } catch (e) {
      print("‚ùå Fel vid h√§mtning av competitions: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.green.shade100,
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "L√§gg till distans-t√§vlingsresultat",
            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
          ),
          const SizedBox(height: 10),
          DropdownButtonFormField<String>(
            value: selectedCompetition,
            items: competitionOptions
                .where((comp) => !comp
                    .toLowerCase()
                    .contains('sprint')) // <-- filtrera bort sprint
                .map((comp) => DropdownMenuItem(
                      value: comp,
                      child: Text(comp),
                    ))
                .toList(),
            onChanged: (value) {
              setState(() {
                selectedCompetition = value;
              });
            },
            decoration:
                const InputDecoration(labelText: "V√§lj distans-t√§vling"),
          ),
          const SizedBox(height: 10),
          TextField(
            controller: _compURLController,
            decoration: const InputDecoration(
              labelText: "L√§nk till distans-t√§vling (FIS)",
              hintText: "https://www.fis-ski.com/...",
            ),
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: () async {
              String compURL = _compURLController.text.trim();

              if (selectedCompetition == null || compURL.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text("‚ùå V√§lj t√§vling och fyll i l√§nk!"),
                  ),
                );
                return;
              }

              try {
                // H√§mta resultatet fr√•n fetchAndSetCompetitionPoints
                final result = await fetchAndSetCompetitionPoints(
                    selectedCompetition!, compURL);
// Dela str√§ngen p√• radbrytningar f√∂r att f√• en lista av str√§ngar
                final List<String> resultLines = result;

// Skicka listan till dialogen
                showResultsDialog(context, resultLines);

                await syncSkierPointsToWeeklyTeams();
                await updateAllSkiersTotalPoints();
                await updateAllTeamsWeeklyPoints(true);
                await updateAllTeamsTotalPoints();

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: const Text("Alla Funktioner har k√∂rts"),
                    duration: const Duration(days: 1),
                    action: SnackBarAction(
                      label: "St√§ng",
                      onPressed: () {
                        ScaffoldMessenger.of(context).hideCurrentSnackBar();
                      },
                    ),
                  ),
                );
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text("‚ùå Fel: $e")),
                );
              }
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: const Text("Uppdatera t√§vlingspo√§ng"),
          ),
          ElevatedButton(
              onPressed: () {
                syncSkierPointsToWeeklyTeams();
              },
              child: Text(
                  "synka med lagens map po√§ng - denna k√∂rs automatiskt n√§r du l√§gger till distansresultat"))
        ],
      ),
    );
  }
}

class AddSprintResultsWidget extends StatefulWidget {
  const AddSprintResultsWidget({super.key});

  @override
  State<AddSprintResultsWidget> createState() => _AddSprintResultsState();
}

class _AddSprintResultsState extends State<AddSprintResultsWidget> {
  final TextEditingController _compURLController = TextEditingController();
  List<String> competitionOptions = [];
  String? selectedCompetition;

  @override
  void initState() {
    super.initState();
    fetchDefinedCompetitions();
  }

  Future<void> fetchDefinedCompetitions() async {
    try {
      FirebaseFirestore db = FirebaseFirestore.instance;
      int currentWeek = await getCurrentWeek();

      DocumentSnapshot doc =
          await db.collection('gameData').doc('currentWeek').get();

      if (doc.exists &&
          (doc.data() as Map<String, dynamic>).containsKey('competitions')) {
        List<dynamic> comps = doc.get('competitions');
        setState(() {
          competitionOptions = comps.cast<String>();
        });
      } else {
        print("‚ö†Ô∏è Inga t√§vlingar definierade f√∂r aktuell vecka.");
      }
    } catch (e) {
      print("‚ùå Fel vid h√§mtning av competitions: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.green.shade100,
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "L√§gg till sprint-t√§vlingsresultat",
            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
          ),
          const SizedBox(height: 10),
          DropdownButtonFormField<String>(
            value: selectedCompetition,
            items: competitionOptions
                .where((comp) => comp
                    .toLowerCase()
                    .contains('sprint')) // <-- filtrera bort sprint
                .map((comp) => DropdownMenuItem(
                      value: comp,
                      child: Text(comp),
                    ))
                .toList(),
            onChanged: (value) {
              setState(() {
                selectedCompetition = value;
              });
            },
            decoration: const InputDecoration(labelText: "V√§lj sprint-t√§vling"),
          ),
          const SizedBox(height: 10),
          TextField(
            controller: _compURLController,
            decoration: const InputDecoration(
              labelText: "L√§nk till sprintt√§vling (FIS)",
              hintText: "https://www.fis-ski.com/...",
            ),
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: () async {
              String compURL = _compURLController.text.trim();

              if (selectedCompetition == null || compURL.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text("‚ùå V√§lj sprintt√§vling och fyll i l√§nk!"),
                  ),
                );
                return;
              }

              try {
                final result = await sprintfetchAndSetCompetitionPoints(
                    selectedCompetition!, compURL);
// Dela str√§ngen p√• radbrytningar f√∂r att f√• en lista av str√§ngar
                final List<String> resultLines = result;

// Skicka listan till dialogen
                showResultsDialog(context, resultLines);
                await updateAllTeamsWeeklyPoints(true);
                await syncSkierPointsToWeeklyTeams();
                await updateAllSkiersTotalPoints();
                await updateAllTeamsWeeklyPoints(true);
                await updateAllTeamsTotalPoints();

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text("‚úÖ T√§vlingspo√§ng uppdaterade!")),
                );
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text("‚ùå Fel: $e")),
                );
              }
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: const Text("Uppdatera t√§vlingspo√§ng"),
          ),
          ElevatedButton(
              onPressed: () {
                syncSkierPointsToWeeklyTeams();
              },
              child: const Text(
                  "synka med lagens map po√§ng - denna k√∂rs automatiskt n√§r du l√§gger till sprintresultat"))
        ],
      ),
    );
  }
}

Widget adminCard(BuildContext context,
    {required IconData icon, required String title, required Widget child}) {
  return Card(
    elevation: 4,
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    margin: const EdgeInsets.symmetric(vertical: 10),
    child: Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: Colors.blue.shade700),
              const SizedBox(width: 10),
              Text(
                title,
                style:
                    const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
            ],
          ),
          const SizedBox(height: 12),
          child,
        ],
      ),
    ),
  );
}

void _snack(BuildContext context, String message) {
  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(message)));
}

Future<bool> _confirmDangerousAction(
    BuildContext context, String message) async {
  return await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text("‚ö†Ô∏è Bekr√§fta √•tg√§rd"),
          content: Text(message),
          actions: [
            TextButton(
                onPressed: () => Navigator.of(context).pop(false),
                child: const Text("Avbryt")),
            TextButton(
                onPressed: () => Navigator.of(context).pop(true),
                child: const Text("Jag √§r s√§ker")),
          ],
        ),
      ) ??
      false;
}

void showResultsDialog(BuildContext context, List<String> results) {
  // Separera p√• hittade vs ej hittade
  final found = results.where((r) => !r.contains("Hittades EJ")).toList();
  final notFound = results.where((r) => r.contains("Hittades EJ")).toList();

  // Sl√• ihop s√• att hittade f√∂rst
  final sortedResults = [...found, ...notFound];

  showDialog(
    context: context,
    builder: (context) => AlertDialog(
      title: const Text("Resultat fr√•n po√§nguppdatering"),
      content: SizedBox(
        width: double.maxFinite,
        height: 300,
        child: ListView.separated(
          itemCount: sortedResults.length,
          separatorBuilder: (_, __) => const SizedBox(height: 4),
          itemBuilder: (context, index) {
            final line = sortedResults[index];
            final isNotFound = line.contains("Hittades EJ");

            return Text(
              line,
              style: TextStyle(
                color: isNotFound ? Colors.red : Colors.black,
                fontWeight: isNotFound ? FontWeight.bold : FontWeight.normal,
              ),
            );
          },
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text("St√§ng"),
        ),
      ],
    ),
  );
}

Future<void> showPointsFeedback(
  BuildContext context, {
  required String title,
  required List<String> messages,
}) async {
  // Visa dialogen
  await showDialog(
    context: context,
    builder: (context) {
      return AlertDialog(
        title: Text(title),
        content: SizedBox(
          width: double.maxFinite,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: messages.length,
            itemBuilder: (context, index) {
              return Padding(
                padding: const EdgeInsets.symmetric(vertical: 2.0),
                child: Text(messages[index]),
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text("St√§ng"),
          ),
        ],
      );
    },
  );
}
